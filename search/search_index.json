{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Account Factory for Terraform (AFT) Blueprints","text":"<p>Welcome to AWS Control Tower Account Factory for Terraform (AFT) Blueprints!</p> <p>This project provides a collection of AFT customization patterns for AWS Control Tower landing zones. AWS customers, partners, and internal AWS teams can make use of these patterns to learn how to implement core service architectures in a greenfield environment.</p>"},{"location":"#introducing-aft-blueprints","title":"Introducing AFT Blueprints","text":"<p>The AFT Blueprints project provides a set of pre-defined architectural patterns which can be easily deployed using AWS Control Tower and the AFT. These patterns serve as blueprints for a comprehensive landing zone, enabling users to kickstart their cloud journey with a robust and secure foundation. The project currently provides example architectures for the following services within the Control Tower environment: Network and DNS, Centralized Backup, Identity Management, and Security.</p> <p>The approach used in this project involves dynamic Terraform providers and a parametrized Landing Zone, aiming to minimize the complexity of the deployment process. The idea is to leverage integrations between the various architectural components, enabling cross-account and cross-region automation workflows, without requiring complex configuration inputs from the user. The objective is to streamline the deployment process, so that users only need to provision the target accounts with minimal environment-specific variable inputs.</p> <p>The core goal of the AFT Blueprints project is to empower AWS customers to accelerate their cloud transformation. It does this by providing a proven and highly automated approach. By offering these predefined architectural patterns, the project helps organizations to reduce the time and effort required to establish a cloud-ready environment at the outset of their cloud journey.</p>"},{"location":"#consumption","title":"Consumption","text":"<p>AFT Blueprints is designed to assist customers in the early stages of their cloud journey. You can utilize these blueprints in the following ways:</p> <ul> <li>Copying the pattern content into your own AFT repositories to use as a starting point for an AWS landing zone. You are free to customize the provided patterns to meet their specific needs.</li> <li>Using the patterns as a reference guide, which can help you to build your own patterns. By reading the documentation and examining the code, you can understand how a particular pattern or architecture was built, and then apply similar logic to develop tailored solutions.</li> </ul>"},{"location":"#repository-structure","title":"Repository structure","text":"<p>This repository contains the Terraform code for various AWS architectural patterns, which re-uses a set of Terraform modules across all of them. We organized the repository structure to have two main directories: patterns and modules.</p>"},{"location":"#pattern-directory","title":"Pattern directory","text":"<p>The <code>pattern</code> directory houses the different AWS architectural patterns. Each pattern is contained within its own subdirectory, named according to the pattern it represents, such as \"single-region-basic\" and \"multi-region-advanced\". The code within these pattern directories define the complete AWS infrastructure required to deploy the corresponding architecture. This allows users to easily identify, understand, and deploy the different architectural patterns supported by this repository.</p>"},{"location":"#modules-directory","title":"Modules directory","text":"<p>The <code>modules</code> directory contains reusable Terraform modules leveraged across multiple AWS architectural patterns. These modules encapsulate specific AWS resources or configurations, such as IAM policies, logging configurations, or networking setups. By separating the modules from the patterns, the repository maintains a clear separation of concerns, making it easier to manage, update, and apply consistent configurations across different patterns. This structure enables a modular and organized approach to managing the AWS architectural patterns and their supporting resources, promoting code reuse and maintainability.</p>"},{"location":"#things-to-keep-in-mind","title":"Things to keep in mind","text":"<ul> <li>The code in this repository is provided as an example only, and is not intended for production use. However, users are free to modify the patterns locally after cloning the repository, in order to suit their own requirements.</li> <li>The patterns provided in this project are not meant to be directly consumed and used as-is, like a module. They are intended as sample code to be referenced by the corresponding AFT repository.</li> <li>The AFT Blueprints project does not aim to teach users the recommended practices for working with Terraform. It also does not provide guidance on how users should structure their own Terraform projects.</li> <li>The AFT Blueprints is maintained by a mixed team of AWS internal staff, including Professional Services Consultants and Solution Architects. This project is not part of an official AWS service and support is provided on a best-effort basis.</li> </ul>"},{"location":"#security","title":"Security","text":"<p>See CONTRIBUTING for more information.</p>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the Apache-2.0 License.</p>"},{"location":"faq/","title":"Frequently Asked Questions","text":""},{"location":"faq/#what-is-aft-blueprints-and-how-can-i-leverage-it-for-my-organization","title":"What is AFT Blueprints and how can I leverage it for my organization?","text":"<p>AFT Blueprints provides a collection of pre-defined architectural patterns for AWS Control Tower landing zones using Account Factory for Terraform (AFT). You can either copy pattern content into your own AFT repositories as a starting point, or use them as reference guides to build custom patterns tailored to your organization's needs.</p>"},{"location":"faq/#what-prerequisites-must-be-in-place-before-implementing-aft-blueprints","title":"What prerequisites must be in place before implementing AFT Blueprints?","text":"<p>You need an AWS account with AWS Organizations with all features enabled, AWS Control Tower, and AWS IAM Identity Center set up. Additionally, you need a dedicated AWS account within the same organization to deploy and manage AFT, plus AWS CLI and Terraform installed locally.</p>"},{"location":"faq/#what-are-the-options-for-bootstrapping-aft","title":"What are the options for bootstrapping AFT?","text":"<p>You have three options:</p> <ol> <li>Use the aft-bootstrap-pipeline. See the implementation guide.</li> <li>Follow the steps in the AWS Control Tower Guide workshop.</li> <li>Follow the Deploy AWS Control Tower Account Factory for Terraform (AFT) guide in the AWS Control Tower documentation.</li> </ol>"},{"location":"faq/#which-architectural-patterns-are-available-in-aft-blueprints","title":"Which architectural patterns are available in AFT Blueprints?","text":"<p>AFT Blueprints offers three main patterns:</p> <ol> <li>Single Region Basic - A foundational cloud architecture in a single AWS Region</li> <li>Multi Region Basic - Extends the basic pattern across multiple AWS Regions</li> <li>Multi Region Advanced - Adds advanced networking features like centralized inspection</li> </ol> <p>Each pattern provides different components and architectures with varying complexity and cost implications.</p>"},{"location":"faq/#which-core-accounts-are-needed-for-implementing-aft-blueprints","title":"Which core accounts are needed for implementing AFT Blueprints?","text":"<p>The required accounts are:</p> <ol> <li>Control Tower shared accounts - Log Archive and Security Tooling</li> <li>Network account - For centralized network management and AWS VPC IP Address Manager (IPAM)</li> <li>Backup account - For centralized AWS Backup management</li> <li>Identity account - For AWS IAM Identity Center and IAM Access Analyzer</li> </ol> <p>These accounts serve as centralized hubs for their respective functions within the organization.</p>"},{"location":"faq/#can-i-modify-the-blueprints-to-meet-my-organizations-specific-requirements","title":"Can I modify the blueprints to meet my organization's specific requirements?","text":"<p>Yes, the patterns are provided as examples and are meant to be modified after cloning the repository. As stated in the README: \"You are free to customize the provided patterns to meet their specific needs\" and \"The code in this repository is provided as an example only, and is not intended for production use.\"</p>"},{"location":"faq/#can-i-run-the-aft-customization-terraform-code-locally","title":"Can I run the AFT customization terraform code locally?","text":"<p>Yes, you can use the aft-local.sh script available in this repository.</p>"},{"location":"getting-started/","title":"Getting started","text":"<p>This getting started guide will walk you through the process of deploying the pattern you selected.</p>"},{"location":"getting-started/#prerequisites","title":"Prerequisites","text":"<p>AFT Blueprints assumes you already have an AWS account with AWS Organizations with all features enabled, AWS Control Tower and AWS IAM Identity Center set up, plus an AWS account within the same organization dedicated to deploy and manage AFT. If you don't have it, see the guidelines below:</p> <ul> <li>To learn how to set up and configure AWS Control Tower in your environment, please follow the Getting started with AWS Control Tower.</li> <li>To launch a new AWS account to serve as your AFT management account, please follow the Provision accounts with AWS Service Catalog Account Factory in the AWS Control Tower documentation.</li> </ul> <p>Ensure that you have installed the following tools:</p> <ul> <li>AWS CLI</li> <li>Terraform</li> </ul> <p>Additionally, you check out aft-local.sh to learn how to run AFT Terraform code locally.</p>"},{"location":"getting-started/#aft-bootstrap","title":"AFT bootstrap","text":"<p>Once all the prerequisites are done, deploy AFT on its dedicated management account. If you already have AFT deployed, you can skip this step.</p> <p>To deploy the AFT, we have a few bootstrap options:</p> <ul> <li> <p>You can use the aft-bootstrap-pipeline . See the how to do it on the Implement Account Factory for Terraform (AFT) by using a bootstrap pipeline  guide.</p> </li> <li> <p>Another option is to follow the steps outlined in the AWS Control Tower Guide workshop. See the section Account Factory for Terraform (AFT).</p> </li> <li> <p>Lastly, you can also follow the Deploy AWS Control Tower Account Factory for Terraform (AFT) in the AWS Control Tower documentation.</p> </li> </ul>"},{"location":"getting-started/#defining-your-account-structure","title":"Defining your account structure","text":"<p>Before going into the patterns available, you must define the structure of AWS accounts and Organization Units (OUs) within AWS Organizations. We developed the patterns based on the AWS best practices for multi-account strategy. Check out the whitepaper Organizing Your AWS Environment Using Multiple Accounts, especially the section Recommended OUs and accounts .</p> <p>We have also prepared an architecture diagram with our recommended structure of OUs and accounts for patterns available here. It is available at AWS Organizations OU and account structure .</p>"},{"location":"getting-started/#selecting-your-pattern","title":"Selecting your pattern","text":"<p>Check all the available patterns at Patterns section. They all have different components and architectures, from single-region landing zone to multi-region with centralized network inspection. Choose the right one for your needs, but keep in mind that depending on the pattern, the final cost of the environment may be higher or lower.</p>"},{"location":"getting-started/#understanding-aws-organizations-interactions","title":"Understanding AWS Organizations interactions","text":"<p>To ensure that all necessary services have trusted access within the organization, we make use of the <code>pre-api-helpers.sh</code> script and AWS CLI commands to enable them. Unfortunately, Terraform usually doesn't provide resources to enable services with all the specific settings needed for each one. However, Terraform does provide resources for delegating administration to member accounts, most of the time. Therefore, we set up delegated administrator accounts whenever possible and as long as the service allows. see below the list of services we enable trusted access in AWS Organizations:</p> <ul> <li>ram.amazonaws.com</li> <li>ipam.amazonaws.com</li> <li>backup.amazonaws.com (including backup policy)</li> <li>access-analyzer.amazonaws.com</li> <li>sso.amazonaws.com (only delegated administration)</li> <li>guardduty.amazonaws.com</li> <li>malware-protection.guardduty.amazonaws.com</li> <li>securityhub.amazonaws.com</li> </ul>"},{"location":"getting-started/#understanding-landing-zone-parameters","title":"Understanding Landing Zone parameters","text":"<p>To automate the deployment of a landing zone, the patterns leverage AWS Systems Manager (SSM) parameters to guide the creation of resources across a multi-account environment. The following content outlines the specific parameters that are created in each account for this purpose.</p> <p>AFT management account:</p> <ul> <li><code>/org/core/accounts/ct-log-archive</code>:  Control Tower Log Archive Account Id.</li> <li><code>/org/core/accounts/ct-security-tooling</code>:  Control Tower Security Tooling Account Id.</li> <li><code>/org/core/accounts/network</code>:  Network Account Id.</li> <li><code>/org/core/accounts/backup</code>: Backup Account Id.</li> <li><code>/org/core/accounts/identity</code>: Identity Account Id.</li> </ul> <p>Network account:</p> <ul> <li><code>/org/core/network/availability-zones/{{ az-id }}</code>: Availability Zone Id to keep the consistency for VPCs across different accounts.</li> <li><code>/org/core/network/tgw-id</code>: The Id of the shared Transit Gateway.</li> <li><code>/org/core/network/tgw-route-table/{{ network-segment }}</code>: Transit Gateway route table Id to associate the VPC attachment for network segment (environment).</li> <li><code>/org/core/network/tgw-propagation-rules</code>:  VPC attachment propagation rules for all network segments.</li> <li><code>/org/core/network/vpc-flow-logs/s3-bucket-arn</code>:  S3 bucket ARN for centralized VPC Flow Logs.</li> </ul> <p>Log Archive account:</p> <ul> <li><code>/org/core/central-logs/vpc-flow-logs</code>: S3 bucket ARN for centralized VPC Flow Logs.</li> </ul>"},{"location":"getting-started/#preparing-aft-repositories","title":"Preparing AFT repositories","text":"<p>For each pattern, regardless of the one you have chosen, we have provided the content for all repositories used in the AFT solution:</p> <ul> <li>aft-global-customizations</li> <li>aft-account-customizations</li> <li>aft-account-provisioning-customizations</li> <li>aft-account-request</li> </ul> <p>First, access the aft-blueprints repository. Then, navigate to the <code>patterns</code> directory and select the pattern you want to use. Copy the content for each repository into your own repositories configured in your AFT deployment. Do not commit and push yet, you need to make some adjustments.</p>"},{"location":"getting-started/#the-aft-global-customizations-repository","title":"The aft-global-customizations repository","text":"<ol> <li>For the aft-global-customizations, please follow the instructions in the <code>README.md</code> file inside the <code>terraform</code> directory, for example <code>/terraform/README.md</code>.</li> <li>Once you have completed the last step, commit and push the changes to your aft-global-customizations.</li> </ol>"},{"location":"getting-started/#the-aft-account-customizations-repository","title":"The aft-account-customizations repository","text":"<ol> <li>In the aft-account-customizations, you must copy the <code>modules</code> directory to the <code>common</code> directory. (e.g /common/modules)</li> <li>You also need to provide your own values for each customization directory inside the aft-account-customizations. Please, follow the instructions in the <code>README.md</code> file inside each <code>terraform</code> directory for each customization, for example <code>/NETWORK/terraform/README.md</code>.</li> <li>Once you have completed the last step, commit and push the changes to your aft-account-customizations.</li> </ol>"},{"location":"getting-started/#the-aft-account-provisioning-customizations-repository","title":"The aft-account-provisioning-customizations repository","text":"<ol> <li>For now aft-account-provisioning-customizations, please follow the instructions in the <code>README.md</code> file inside the <code>terraform</code> directory, for example <code>/terraform/README.md</code>.</li> <li>Once you have completed the last step, commit and push the changes to your aft-account-provisioning-customizations.</li> <li>Make sure the ct-aft-account-provisioning-customizations pipeline in the AFT management account has run and completed successfully.</li> </ol>"},{"location":"getting-started/#the-aft-account-request-repository","title":"The aft-account-request repository","text":"<ol> <li>The aft-account-request is covered in the next section.</li> </ol>"},{"location":"getting-started/#onboarding-control-tower-shared-accounts","title":"Onboarding Control Tower shared accounts","text":"<p>AWS Control Tower helps organizations set up dedicated accounts that provide isolated environments for specialized roles. These accounts serve as centralized hubs for management, log archiving, and security auditing within the organization. See more in About AWS accounts in AWS Control Tower. The first account we must onboard into AFT are Log archive account and Audit(Security Tooling) account. Please follow steps below to onboard those accounts:</p> <ol> <li>Edit the respective files for each account, <code>ct-log-archive.tf</code> and <code>ct-security-tooling.tf</code>, and replace the values in the <code>control_tower_parameters</code>, <code>account_tags</code> and <code>change_management_parameters</code> with your own values. Please, make sure your specify the exact AccountEmail value for existing accounts, do not provide new email values for them.</li> <li>Once you have completed the previous step, commit and push the changes to aft-account-request repository.</li> <li>Go to the AFT management account and wait for each account-related pipeline to complete before proceeding to the next step. If any of them fail, try running the pipeline again. This should take a few minutes.</li> </ol>"},{"location":"getting-started/#launching-core-accounts","title":"Launching core accounts","text":"<p>Now, you should be able to launch your core accounts, one for each core architecture: Network, Backup and Identity. To do so, please follow steps below:</p> <ol> <li>For each core account, we made available these account files: <code>network.tf.hold</code>, <code>backup.tf.hold</code> and <code>identity.tf.hold</code>. Please, remove the <code>.hold</code> extension for all of them.</li> <li>Edit the files and replace the values in the <code>control_tower_parameters</code>, <code>account_tags</code> and <code>change_management_parameters</code> with your own values. For these accounts, you must provide new e-mail values in order for AFT to launch new accounts.</li> <li>Once you have completed the previous step, commit and push the changes to aft-account-request repository.</li> <li>Go to the AWS Control Tower management account and wait for the three account to be enrolled. It may take 30min or more.</li> <li>Go back to the AFT management account and wait for each account-related pipeline to complete before proceeding to the next step. If any of them fail, try running the pipeline again.</li> </ol>"},{"location":"getting-started/#launching-workload-accounts","title":"Launching workload accounts","text":"<p>Before you start launching your workload accounts, please check your three core accounts. Check if all of them have the services deployed and configured according to the chosen pattern.</p> <ol> <li>We made available three workload account files: <code>development.tf.hold</code>, <code>stage.tf.hold</code>and <code>production.tf.hold</code>. You can launch any one of them, or all three at the same time, but first remove the <code>.hold</code> extension for the ones you are intended to use.</li> <li>Edit the files you removed the <code>.hold</code> extension, and replace the values in the <code>control_tower_parameters</code>, <code>account_tags</code> and <code>change_management_parameters</code> with your own values.</li> <li>Go to the AWS Control Tower management account and wait for the three account to be enrolled in AWS Control Tower. It may take 30min or more.</li> <li>Go back to the AFT management account and wait for each account-related pipeline to complete before proceeding to the next step.</li> <li>Please, check your new accounts to make sure they are set up correctly.</li> </ol>"},{"location":"patterns/","title":"Patterns","text":"<ul> <li> <p>Single Region Basic</p> </li> <li> <p>Multi Region Basic</p> </li> <li> <p>Multi Region Advanced</p> </li> </ul>"},{"location":"architectures/account-structure/","title":"AWS Organizations OU and account structure","text":""},{"location":"architectures/aws-backup/","title":"Centralized AWS Backup architecture","text":""},{"location":"architectures/centralized-dns/","title":"Centralized DNS resolution","text":""},{"location":"architectures/centralized-logs/","title":"Centralized Logs","text":""},{"location":"architectures/centralized-logs/#vpc-flow-logs","title":"VPC Flow Logs","text":""},{"location":"architectures/identity-management/","title":"Identity Management solutions","text":""},{"location":"architectures/network-advanced/","title":"Advanced Network","text":""},{"location":"architectures/network-basic/","title":"Basic Network","text":""},{"location":"architectures/network-intermediate/","title":"Intermediate Network","text":""},{"location":"architectures/security/","title":"Security services","text":""},{"location":"architectures/security/#aws-security-hub","title":"AWS Security Hub","text":""},{"location":"architectures/security/#amazon-guardduty","title":"Amazon GuardDuty","text":""},{"location":"architectures/workload-account/","title":"Workload account","text":""},{"location":"patterns/multi-region-advanced/","title":"Multi region advanced pattern","text":"<p>The multi region advanced AFT pattern provides a foundational cloud architecture, covering key services and configurations to establish a secure, multi-environment landing zone in multiple AWS Region and connecting the cloud with the on-premises environment. See the high-level target state diagram below.</p> <p></p>"},{"location":"patterns/multi-region-advanced/#network","title":"Network","text":"<p>At the core of the network design is a multi-region configuration, with cross-region communication facilitated through Transit Gateway peering. The pattern also features a centralized inspection Amazon Virtual Private Cloud (VPC) using AWS Network Firewall a NAT Gateway, for East-West and North-South traffic inspection. It's designed to support a full mesh routing across all spoke VPCs, for all environments, such as shared services, production, staging, and development. Ingress traffic is distributed and managed within each workload VPC on its public subnet.</p> <p>Traffic between workload environments (prod, stage, dev) is sent to the inspection VPC and the control is carried out via firewall rules, while traffic to/from the shared services environment (DNS, VPC endpoints, infrastructure services, etc.) is routed directly to all other environments. All VPCs make use of a local VPC Flow Logs mechanism, sending traffic logs to a CloudWatch Log Group, and optionally can send traffic logs to an S3 bucket in the Control Tower's Log Archive account. In this pattern, centralized VPC Flow Logs are enabled for \"production\" environments.</p> <p>The pattern also includes a centralized endpoints VPC to provide a cost-effective way to manage AWS endpoint services powered by AWS PrivateLink. This VPC also includes a centralized Amazon Route 53 Resolver endpoints, which combined with Amazon Route 53 Resolver rules provide a centralized DNS resolution mechanism.</p> <p>The centralized DNS resolution architecture implemented by this pattern, provides a hybrid integration between Amazon Route 53 Private Hosted Zones (PHZ) and third-party DNS servers, enabling a bi-directional resolution mechanism. Moreover, this architecture also allows delegate for the delegation of \"child\" PHZs to each workload account, enabling individual teams to managed their DNS zones while still maintaining the DNS resolution across the entire organization.</p> <p>Additionally, to enable effective IP management integrated with AWS services, the Network account is used as the delegated administrator of the AWS VPC IP Address Manager (IPAM) for the entire organization. Different IP pools are created for each environment mentioned above, making it easier to control and manage IP addresses and routing domains.</p> <p>This pattern extends the network architecture to provide a path to establish a connection with an on-premises environment through either AWS Direct Connect or Amazon VPC Transit Gateway Site-to-Site VPN, ensuring seamless and secure integration between the cloud and on-premises resources.</p> <p>The entire network architecture is mirrored across all regions, ensuring that each region has the same services and resources implemented.</p> <p>See more details in the Network Advanced and Centralized DNS architecture pages.</p>"},{"location":"patterns/multi-region-advanced/#backup","title":"Backup","text":"<p>The pattern also includes a centralized backup architecture with local vaults and a central vault in a dedicated AWS Backup account, providing consolidated backup management and recovery across the environments.</p> <p>See more details in the Centralized AWS Backup architecture page.</p>"},{"location":"patterns/multi-region-advanced/#identity-management","title":"Identity Management","text":"<p>Additionally, the pattern sets up a delegated administrator account for the AWS IAM Identity Center and IAM Access Analyzer services. This includes a Terraform-based pipeline to dynamically deploy and manage Permission Sets, and an analyzer for external access analysis at organization level.</p> <p>See more details in the Identity Management architecture page.</p>"},{"location":"patterns/multi-region-advanced/#security","title":"Security","text":"<p>All the patterns include the same configuration for basic AWS Security services, such as AWS Security Hub and Amazon GuardDuty.</p> <p>See more details in the Security Services architecture page.</p>"},{"location":"patterns/multi-region-advanced/#global-customizations","title":"Global Customizations","text":"<p>This pattern also includes global customizations that are applied across all accounts. These encompass the definition of the password policy for IAM users, as well as account-level configurations such as S3 Block Public Access, AMI Block Public Access, EBS account-level encryption enforcement, and IMDSv2 account-level enforcement.</p>"},{"location":"patterns/multi-region-advanced/#account-provisioning-customizations","title":"Account Provisioning Customizations","text":"<p>No account provisioning customizations other than the AFT default are available for this pattern.</p>"},{"location":"patterns/multi-region-basic/","title":"Multi region basic pattern","text":"<p>The multi region basic AFT pattern provides a foundational cloud architecture, covering key services and configurations to establish a secure, multi-environment landing zone in multiple AWS Region. See the high-level target state diagram below.</p> <p></p>"},{"location":"patterns/multi-region-basic/#network","title":"Network","text":"<p>At the core of the network design is a multi-region configuration, with cross-region communication facilitated through Transit Gateway peering. The pattern also features a centralized Amazon Virtual Private Cloud (VPC) using a NAT Gateway, along with segregated environments for shared services, production, staging, and development. Ingress traffic is distributed and managed within each workload VPC on its public subnet.</p> <p>Traffic between the workload environments (prod, stage, dev) is isolated and not routed, while traffic to/from the shared services environment (DNS, VPC endpoints, infrastructure services, etc.) is routed to all other environments. All VPCs make use of a local VPC Flow Logs mechanism, sending traffic logs to a CloudWatch Log Group, and optionally can send traffic logs to an S3 bucket in the Control Tower's Log Archive account.</p> <p>The pattern also includes a centralized endpoints VPC to provide a cost-effective way to manage AWS endpoint services powered by AWS PrivateLink. This VPC also includes a centralized Amazon Route 53 Resolver endpoints, which combined with Amazon Route 53 Resolver rules provide a centralized DNS resolution mechanism.</p> <p>The centralized DNS resolution architecture implemented by this pattern, provides a hybrid integration between Amazon Route 53 Private Hosted Zones (PHZ) and third-party DNS servers, enabling a bi-directional resolution mechanism. Moreover, this architecture also allows delegate for the delegation of \"child\" PHZs to each workload account, enabling individual teams to managed their DNS zones while still maintaining the DNS resolution across the entire organization.</p> <p>Additionally, to enable effective IP management integrated with AWS services, the Network account is used as the delegated administrator of the AWS VPC IP Address Manager (IPAM) for the entire organization. Different IP pools are created for each environment mentioned above, making it easier to control and manage IP addresses and routing domains.</p> <p>The entire network architecture is mirrored across all regions, ensuring that each region has the same services and resources implemented.</p> <p>See more details in the Network Advanced and Centralized DNS architecture pages.</p>"},{"location":"patterns/multi-region-basic/#backup","title":"Backup","text":"<p>The pattern also includes a centralized backup architecture with local vaults and a central vault in a dedicated AWS Backup account, providing consolidated backup management and recovery across the environments.</p> <p>See more details in the Centralized AWS Backup architecture page.</p>"},{"location":"patterns/multi-region-basic/#identity-management","title":"Identity Management","text":"<p>Additionally, the pattern sets up a delegated administrator account for the AWS IAM Identity Center and IAM Access Analyzer services. This includes a Terraform-based pipeline to dynamically deploy and manage Permission Sets, and an analyzer for external access analysis at organization level.</p> <p>See more details in the Identity Management architecture page.</p>"},{"location":"patterns/multi-region-basic/#security","title":"Security","text":"<p>All the patterns include the same configuration for basic AWS Security services, such as AWS Security Hub and Amazon GuardDuty.</p> <p>See more details in the Security Services architecture page.</p>"},{"location":"patterns/multi-region-basic/#global-customizations","title":"Global Customizations","text":"<p>This pattern also includes global customizations that are applied across all accounts. These encompass the definition of the password policy for IAM users, as well as account-level configurations such as S3 Block Public Access, AMI Block Public Access, EBS account-level encryption enforcement, and IMDSv2 account-level enforcement.</p>"},{"location":"patterns/multi-region-basic/#account-provisioning-customizations","title":"Account Provisioning Customizations","text":"<p>No account provisioning customizations other than the AFT default are available for this pattern.</p>"},{"location":"patterns/single-region-basic/","title":"Single region basic pattern","text":"<p>The single region basic AFT pattern provides a foundational cloud architecture, covering key services and configurations to establish a secure, multi-environment landing zone in a single AWS Region. See the high-level target state diagram below.</p> <p></p>"},{"location":"patterns/single-region-basic/#network","title":"Network","text":"<p>The network design features a centralized egress Amazon Virtual Private Cloud (VPC) using a NAT Gateway, along with segregated environments for shared services, production, staging, and development. Ingress traffic is distributed and managed within each workload VPC on its public subnet.</p> <p>The traffic between the workload environments (prod, stage, dev) is isolated and not routed, while traffic to/from the shared services environment is routed to all other environments. All VPCs make use of a local VPC Flow Logs mechanism, sending traffic logs to a CloudWatch Log Group, and optionally can send traffic logs to an S3 bucket in the Control Tower's Log Archive account.</p> <p>Additionally, to enable effective IP management integrated with AWS services, the Network account is used as the delegated administrator of the AWS VPC IP Address Manager (IPAM) for the entire organization. Different IP pools are created for each environment mentioned above, making it easier to control and manage IP addresses and routing domains.</p> <p>See more details in the Network Basic architecture page.</p>"},{"location":"patterns/single-region-basic/#backup","title":"Backup","text":"<p>The pattern also includes a centralized backup architecture with local vaults and a central vault in a dedicated AWS Backup account, providing consolidated backup management and recovery across the environments.</p> <p>See more details in the Centralized AWS Backup architecture page.</p>"},{"location":"patterns/single-region-basic/#identity-management","title":"Identity Management","text":"<p>Additionally, the pattern sets up a delegated administrator account for the AWS IAM Identity Center and IAM Access Analyzer services. This includes a Terraform-based pipeline to dynamically deploy and manage Permission Sets, and an analyzer for external access analysis at organization level.</p> <p>See more details in the Identity Management architecture page.</p>"},{"location":"patterns/single-region-basic/#security","title":"Security","text":"<p>All the patterns include the same configuration for basic AWS Security services, such as AWS Security Hub and Amazon GuardDuty.</p> <p>See more details in the Security Services architecture page.</p>"},{"location":"patterns/single-region-basic/#global-customizations","title":"Global Customizations","text":"<p>This pattern also includes global customizations that are applied across all accounts. These encompass the definition of the password policy for IAM users, as well as account-level configurations such as S3 Block Public Access, AMI Block Public Access, EBS account-level encryption enforcement, and IMDSv2 account-level enforcement.</p>"},{"location":"patterns/single-region-basic/#account-provisioning-customizations","title":"Account Provisioning Customizations","text":"<p>No account provisioning customizations other than the AFT default are available for this pattern.</p>"}]}